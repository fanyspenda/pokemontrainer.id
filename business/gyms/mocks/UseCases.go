// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	gyms "pokemontrainer/business/gyms"

	mock "github.com/stretchr/testify/mock"
)

// UseCases is an autogenerated mock type for the UseCases type
type UseCases struct {
	mock.Mock
}

// AddGym provides a mock function with given fields: ctx, name, address
func (_m *UseCases) AddGym(ctx context.Context, name string, address string) (gyms.Domain, error) {
	ret := _m.Called(ctx, name, address)

	var r0 gyms.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) gyms.Domain); ok {
		r0 = rf(ctx, name, address)
	} else {
		r0 = ret.Get(0).(gyms.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGyms provides a mock function with given fields: ctx
func (_m *UseCases) GetGyms(ctx context.Context) ([]gyms.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []gyms.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []gyms.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gyms.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGym provides a mock function with given fields: ctx, gymID, name, address
func (_m *UseCases) UpdateGym(ctx context.Context, gymID int, name string, address string) (gyms.Domain, error) {
	ret := _m.Called(ctx, gymID, name, address)

	var r0 gyms.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) gyms.Domain); ok {
		r0 = rf(ctx, gymID, name, address)
	} else {
		r0 = ret.Get(0).(gyms.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string, string) error); ok {
		r1 = rf(ctx, gymID, name, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
