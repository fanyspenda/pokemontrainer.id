// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	pokeballs "pokemontrainer/business/pokeballs"

	mock "github.com/stretchr/testify/mock"

	trainers "pokemontrainer/business/trainers"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddGym provides a mock function with given fields: ctx, trainerID, gymID
func (_m *Repository) AddGym(ctx context.Context, trainerID int, gymID int) (trainers.Domain, error) {
	ret := _m.Called(ctx, trainerID, gymID)

	var r0 trainers.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) trainers.Domain); ok {
		r0 = rf(ctx, trainerID, gymID)
	} else {
		r0 = ret.Get(0).(trainers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, trainerID, gymID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatchPokemon provides a mock function with given fields: ctx, ID, pokemonID
func (_m *Repository) CatchPokemon(ctx context.Context, ID int, pokemonID int) (trainers.Domain, error) {
	ret := _m.Called(ctx, ID, pokemonID)

	var r0 trainers.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) trainers.Domain); ok {
		r0 = rf(ctx, ID, pokemonID)
	} else {
		r0 = ret.Get(0).(trainers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, ID, pokemonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirstBall provides a mock function with given fields: ctx, trainerID
func (_m *Repository) GetFirstBall(ctx context.Context, trainerID uint) (pokeballs.Domain, error) {
	ret := _m.Called(ctx, trainerID)

	var r0 pokeballs.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) pokeballs.Domain); ok {
		r0 = rf(ctx, trainerID)
	} else {
		r0 = ret.Get(0).(pokeballs.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, trainerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrainers provides a mock function with given fields: ctx
func (_m *Repository) GetTrainers(ctx context.Context) ([]trainers.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []trainers.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []trainers.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trainers.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *Repository) Login(ctx context.Context, username string, password string) (trainers.Domain, error) {
	ret := _m.Called(ctx, username, password)

	var r0 trainers.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) trainers.Domain); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(trainers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, name, address, username, password
func (_m *Repository) Register(ctx context.Context, name string, address string, username string, password string) (trainers.Domain, error) {
	ret := _m.Called(ctx, name, address, username, password)

	var r0 trainers.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) trainers.Domain); ok {
		r0 = rf(ctx, name, address, username, password)
	} else {
		r0 = ret.Get(0).(trainers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, address, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrainer provides a mock function with given fields: ctx, trainerID, name, address, username, password
func (_m *Repository) UpdateTrainer(ctx context.Context, trainerID int, name string, address string, username string, password string) (trainers.Domain, error) {
	ret := _m.Called(ctx, trainerID, name, address, username, password)

	var r0 trainers.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string, string) trainers.Domain); ok {
		r0 = rf(ctx, trainerID, name, address, username, password)
	} else {
		r0 = ret.Get(0).(trainers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, string, string) error); ok {
		r1 = rf(ctx, trainerID, name, address, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
